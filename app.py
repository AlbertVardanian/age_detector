from flask import Flask, request, jsonify, render_template
import cv2
import numpy as np
import os
from deepface import DeepFace
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/predict', methods=['POST'])
def predict_age():
    try:
        if 'photo' not in request.files:
            return jsonify({'success': False, 'error': '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞'})
        
        file = request.files['photo']
        
        if file.filename == '':
            return jsonify({'success': False, 'error': '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'})
        
        if file.content_length > 20 * 1024 * 1024:
            return jsonify({'success': False, 'error': '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º 20MB'})
        
        temp_path = "temp_analysis.jpg"
        file.save(temp_path)
        
        print("üîç –ó–∞–ø—É—Å–∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏...")
        
        result = enhanced_age_analysis(temp_path)
        
        if os.path.exists(temp_path):
            os.remove(temp_path)
        
        return jsonify(result)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        if 'temp_path' in locals() and os.path.exists(temp_path):
            os.remove(temp_path)
        return jsonify({'success': False, 'error': '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞'})

def enhanced_age_analysis(image_path):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–æ–∑—Ä–∞—Å—Ç–∞ –±–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª–∞"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –≤–æ–∑—Ä–∞—Å—Ç –∏ —ç–º–æ—Ü–∏–∏
        analysis_results = DeepFace.analyze(
            img_path=image_path,
            actions=['age', 'emotion'],  # –¢–û–õ–¨–ö–û –í–û–ó–†–ê–°–¢ –ò –≠–ú–û–¶–ò–ò
            enforce_detection=False,
            detector_backend='opencv',
            silent=False
        )
        
        deepface_age = int(analysis_results[0]['age'])
        emotion = analysis_results[0]['dominant_emotion']
        
        print(f"üß† DeepFace –æ–ø—Ä–µ–¥–µ–ª–∏–ª: {deepface_age} –ª–µ—Ç")
        
        # –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –î–ï–¢–°–ö–ò–• –ß–ï–†–¢
        child_features = analyze_child_features(image_path)
        
        # –£–ú–ù–ê–Ø –ö–û–†–†–ï–ö–¶–ò–Ø –í–û–ó–†–ê–°–¢–ê
        corrected_age = smart_age_correction(deepface_age, child_features)
        
        emotion_ru = translate_emotion(emotion)
        
        return {
            'success': True,
            'age': corrected_age,
            'emotion': emotion_ru,
            'category': get_age_category(corrected_age),
            'confidence': get_confidence_level(child_features['score']),
            'message': get_age_message(corrected_age, emotion_ru),
            'analysis': get_analysis_details(child_features),
            'original_age': deepface_age,
            'child_score': round(child_features['score'], 1)
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: {e}")
        return fallback_analysis(image_path)

def analyze_child_features(image_path):
    """–ê–Ω–∞–ª–∏–∑ –¥–µ—Ç—Å–∫–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ª–∏—Ü–∞"""
    img = cv2.imread(image_path)
    if img is None:
        return {'score': 0, 'features': {}}
    
    features = {}
    
    try:
        face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
        eye_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_eye.xml')
        
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        faces = face_cascade.detectMultiScale(gray, 1.1, 5)
        
        if len(faces) == 0:
            return {'score': 0, 'features': {}}
        
        x, y, w, h = faces[0]
        face_roi = img[y:y+h, x:x+w]
        
        if face_roi.size == 0:
            return {'score': 0, 'features': {}}
        
        gray_face = cv2.cvtColor(face_roi, cv2.COLOR_BGR2GRAY)
        
        # 1. –ê–ù–ê–õ–ò–ó –ì–õ–ê–ó (–¥–µ—Ç–∏ –∏–º–µ—é—Ç –±–æ–ª—å—à–∏–µ –≥–ª–∞–∑–∞)
        eyes = eye_cascade.detectMultiScale(gray_face, 1.1, 3)
        features['eyes_detected'] = len(eyes)
        
        if len(eyes) >= 2:
            eye_area = sum(ew * eh for (ex, ey, ew, eh) in eyes)
            face_area = w * h
            features['eye_face_ratio'] = eye_area / face_area
        else:
            features['eye_face_ratio'] = 0.15
        
        # 2. –ê–ù–ê–õ–ò–ó –¢–ï–ö–°–¢–£–†–´ –ö–û–ñ–ò
        laplacian_var = cv2.Laplacian(gray_face, cv2.CV_64F).var()
        features['skin_smoothness'] = 1.0 - min(laplacian_var / 120.0, 1.0)  # –ë–æ–ª–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π
        
        # 3. –ê–ù–ê–õ–ò–ó –§–û–†–ú–´ –õ–ò–¶–ê
        aspect_ratio = w / h
        features['face_roundness'] = 1.0 - min(abs(aspect_ratio - 0.85), 0.3) / 0.3
        
        # 4. –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´
        features['brightness'] = np.mean(gray_face) / 255.0
        features['contrast'] = gray_face.std() / 100.0
        
        # –í–´–ß–ò–°–õ–Ø–ï–ú –û–ë–©–ò–ô SCORE –î–ï–¢–°–ö–û–°–¢–ò
        child_score = calculate_child_score(features)
        
        print(f"üìä –ê–Ω–∞–ª–∏–∑: –≥–ª–∞–∑–∞ {features.get('eye_face_ratio', 0):.3f}, "
              f"–≥–ª–∞–¥–∫–æ—Å—Ç—å {features.get('skin_smoothness', 0):.2f}, "
              f"–æ–∫—Ä—É–≥–ª–æ—Å—Ç—å {features.get('face_roundness', 0):.2f}")
        
        return {'score': child_score, 'features': features}
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä—Ç: {e}")
        return {'score': 0, 'features': {}}

def calculate_child_score(features):
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –¥–µ—Ç—Å–∫–æ—Å—Ç–∏"""
    score = 0
    
    # –ë–æ–ª—å—à–∏–µ –≥–ª–∞–∑–∞ (—Å–∞–º—ã–π –≤–∞–∂–Ω—ã–π –ø—Ä–∏–∑–Ω–∞–∫)
    eye_ratio = features.get('eye_face_ratio', 0.15)
    if eye_ratio > 0.25:
        score += 4.0
    elif eye_ratio > 0.20:
        score += 3.0
    elif eye_ratio > 0.16:
        score += 2.0
    elif eye_ratio > 0.13:
        score += 1.0
    
    # –ì–ª–∞–¥–∫–∞—è –∫–æ–∂–∞
    smoothness = features.get('skin_smoothness', 0.5)
    if smoothness > 0.85:
        score += 3.0
    elif smoothness > 0.70:
        score += 2.0
    elif smoothness > 0.55:
        score += 1.0
    
    # –ö—Ä—É–≥–ª–æ–µ –ª–∏—Ü–æ
    roundness = features.get('face_roundness', 0.5)
    if roundness > 0.85:
        score += 2.0
    elif roundness > 0.70:
        score += 1.0
    
    # –Ø—Ä–∫–æ—Å—Ç—å (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–∏–∑–Ω–∞–∫)
    brightness = features.get('brightness', 0.5)
    if brightness > 0.75:
        score += 0.5
    
    return min(score, 10.0)

def smart_age_correction(deepface_age, child_analysis):
    """–£–º–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–µ—Ç—Å–∫–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
    child_score = child_analysis['score']
    
    print(f"üéØ –û—Ü–µ–Ω–∫–∞ –¥–µ—Ç—Å–∫–æ—Å—Ç–∏: {child_score:.1f}/10, DeepFace: {deepface_age} –ª–µ—Ç")
    
    # –°–ò–õ–¨–ù–´–ï –î–ï–¢–°–ö–ò–ï –ü–†–ò–ó–ù–ê–ö–ò
    if child_score >= 8.0:
        if deepface_age > 12:
            return max(1, min(6, deepface_age - 20))  # –ú–ª–∞–¥–µ–Ω–µ—Ü/–º–∞–ª—ã—à
        else:
            return deepface_age
    
    # –Ø–í–ù–´–ï –î–ï–¢–°–ö–ò–ï –ü–†–ò–ó–ù–ê–ö–ò
    elif child_score >= 6.0:
        if deepface_age > 15:
            return max(4, min(10, deepface_age - 12))  # –†–µ–±–µ–Ω–æ–∫
        else:
            return deepface_age
    
    # –£–ú–ï–†–ï–ù–ù–´–ï –î–ï–¢–°–ö–ò–ï –ü–†–ò–ó–ù–ê–ö–ò
    elif child_score >= 4.0:
        if deepface_age > 18:
            return max(8, min(15, deepface_age - 8))  # –ü–æ–¥—Ä–æ—Å—Ç–æ–∫
        else:
            return deepface_age
    
    # –°–õ–ê–ë–´–ï –î–ï–¢–°–ö–ò–ï –ü–†–ò–ó–ù–ê–ö–ò
    elif child_score >= 2.0:
        if deepface_age < 10:
            return min(20, deepface_age + 8)  # –ú–æ–ª–æ–¥–æ–π –≤–∑—Ä–æ—Å–ª—ã–π
        else:
            return deepface_age
    
    # –í–ó–†–û–°–õ–´–ï –ü–†–ò–ó–ù–ê–ö–ò
    else:
        if deepface_age < 15:
            return min(30, deepface_age + 12)  # –í–∑—Ä–æ—Å–ª—ã–π
        else:
            return deepface_age

def get_confidence_level(child_score):
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"""
    if child_score >= 7.0:
        return "–æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è"
    elif child_score >= 5.0:
        return "–≤—ã—Å–æ–∫–∞—è"
    elif child_score >= 3.0:
        return "—Å—Ä–µ–¥–Ω—è—è"
    else:
        return "–±–∞–∑–æ–≤–∞—è"

def get_age_message(age, emotion):
    """–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    if age < 3:
        return f"–ú–ª–∞–¥–µ–Ω–µ—Ü! –≠–º–æ—Ü–∏—è: {emotion.lower()} üë∂"
    elif age < 7:
        return f"–ú–∞–ª–µ–Ω—å–∫–∏–π —Ä–µ–±–µ–Ω–æ–∫! –≠–º–æ—Ü–∏—è: {emotion.lower()} üßí"
    elif age < 13:
        return f"–†–µ–±–µ–Ω–æ–∫! –≠–º–æ—Ü–∏—è: {emotion.lower()} üë¶"
    elif age < 18:
        return f"–ü–æ–¥—Ä–æ—Å—Ç–æ–∫! –≠–º–æ—Ü–∏—è: {emotion.lower()} üéì"
    elif age < 30:
        return f"–ú–æ–ª–æ–¥–æ–π –≤–∑—Ä–æ—Å–ª—ã–π! –≠–º–æ—Ü–∏—è: {emotion.lower()} üíº"
    elif age < 50:
        return f"–í–∑—Ä–æ—Å–ª—ã–π! –≠–º–æ—Ü–∏—è: {emotion.lower()} üî•"
    else:
        return f"–ó—Ä–µ–ª—ã–π –≤–æ–∑—Ä–∞—Å—Ç! –≠–º–æ—Ü–∏—è: {emotion.lower()} üéØ"

def get_analysis_details(child_analysis):
    """–î–µ—Ç–∞–ª–∏ –∞–Ω–∞–ª–∏–∑–∞"""
    features = child_analysis['features']
    score = child_analysis['score']
    
    details = []
    
    if features.get('eye_face_ratio', 0) > 0.2:
        details.append("–±–æ–ª—å—à–∏–µ –≥–ª–∞–∑–∞")
    elif features.get('eye_face_ratio', 0) > 0.15:
        details.append("—Å—Ä–µ–¥–Ω–∏–µ –≥–ª–∞–∑–∞")
    else:
        details.append("–º–∞–ª–µ–Ω—å–∫–∏–µ –≥–ª–∞–∑–∞")
    
    if features.get('skin_smoothness', 0) > 0.7:
        details.append("–≥–ª–∞–¥–∫–∞—è –∫–æ–∂–∞")
    elif features.get('skin_smoothness', 0) > 0.5:
        details.append("–Ω–æ—Ä–º–∞–ª—å–Ω–∞—è –∫–æ–∂–∞")
    else:
        details.append("—Ç–µ–∫—Å—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–∂–∞")
    
    if features.get('face_roundness', 0) > 0.7:
        details.append("–æ–∫—Ä—É–≥–ª–æ–µ –ª–∏—Ü–æ")
    else:
        details.append("–≤—ã—Ç—è–Ω—É—Ç–æ–µ –ª–∏—Ü–æ")
    
    return f"–ê–Ω–∞–ª–∏–∑: {', '.join(details)} (–¥–µ—Ç—Å–∫–æ—Å—Ç—å: {score:.1f}/10)"

def fallback_analysis(image_path):
    """–†–µ–∑–µ—Ä–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""
    try:
        img = cv2.imread(image_path)
        if img is None:
            return {'success': False, 'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'}
        
        child_features = analyze_child_features(image_path)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–µ—Ç—Å–∫–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        if child_features['score'] >= 7.0:
            age = 3
        elif child_features['score'] >= 5.0:
            age = 8
        elif child_features['score'] >= 3.0:
            age = 14
        else:
            age = 28
        
        return {
            'success': True,
            'age': age,
            'emotion': "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π",
            'category': get_age_category(age),
            'confidence': '—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑',
            'message': f'–†–µ–∑–µ—Ä–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑: {age} –ª–µ—Ç',
            'analysis': get_analysis_details(child_features)
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return {'success': False, 'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'}

def translate_emotion(emotion):
    emotions_map = {
        'angry': '–°–µ—Ä–¥–∏—Ç—ã–π', 'disgust': '–ù–µ–ø—Ä–∏—è–∑–Ω—å', 'fear': '–ò—Å–ø—É–≥', 
        'happy': '–°—á–∞—Å—Ç–ª–∏–≤—ã–π', 'sad': '–ì—Ä—É—Å—Ç–Ω—ã–π', 'surprise': '–£–¥–∏–≤–ª–µ–Ω–Ω—ã–π',
        'neutral': '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π'
    }
    return emotions_map.get(emotion, emotion)

def get_age_category(age):
    if age < 3: return "–ú–ª–∞–¥–µ–Ω–µ—Ü"
    elif age < 7: return "–ú–∞–ª–µ–Ω—å–∫–∏–π —Ä–µ–±–µ–Ω–æ–∫"
    elif age < 13: return "–†–µ–±–µ–Ω–æ–∫"
    elif age < 18: return "–ü–æ–¥—Ä–æ—Å—Ç–æ–∫" 
    elif age < 30: return "–ú–æ–ª–æ–¥–æ–π –≤–∑—Ä–æ—Å–ª—ã–π"
    elif age < 50: return "–í–∑—Ä–æ—Å–ª—ã–π"
    else: return "–ó—Ä–µ–ª—ã–π –≤–æ–∑—Ä–∞—Å—Ç"

if __name__ == '__main__':
    print("üöÄ –ó–ê–ü–£–°–ö –£–õ–£–ß–®–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –í–û–ó–†–ê–°–¢–ê!")
    print("üë∂ –¢–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–µ—Ç—Å–∫–∏—Ö —á–µ—Ä—Ç: –≥–ª–∞–∑–∞, –∫–æ–∂–∞, —Ñ–æ—Ä–º–∞ –ª–∏—Ü–∞")
    print("üéØ –£–º–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –≤–æ–∑—Ä–∞—Å—Ç–æ–≤ DeepFace")
    print("üìä –ë–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª–∞ - —Ç–æ–ª—å–∫–æ –≤–æ–∑—Ä–∞—Å—Ç –∏ —ç–º–æ—Ü–∏–∏")
    print("üåê –û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:5000")
    app.run(debug=True, host='127.0.0.1', port=5000)